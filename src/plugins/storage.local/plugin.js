import { templates } from './templates';
import { specs } from './specs';

const emptyTemplate = {
    id:'0',
    preview:'',
    description: "Plantilla en blanco",
    createdAt: '',
    name:'En blanco',
    category:'',
    license:'GPL',
    createdBy:"",
    url: "",
    baseUrl: 'http://boa.nuestroscursos.net/api/c/repositorio-de-pruebas/resources/MURGMzk4NUYtMEM5Ny00RjI1LThDNTUtNTQ5QjRFNzI0QTNGQGJvYS51ZGVhLmVkdS5jbw==/!/'
};

const store = window.localStorage;
const categories = ['Category 1', 'Category 2', 'Category 3'];
const collections = {};

function getCollection(name, defaultValue) {
    if (!collections[name]) {
        collections[name] = readStoreKey(name, defaultValue);
    }
    return collections[name];
}

function readStoreKey(key, defaultValue = null) {
    let value = store.getItem(key);
    if (!value && defaultValue) {
        value = defaultValue;
        updateStoreKey(key, defaultValue);
    }
    else {
        value = JSON.parse(value);
    }
    return value;
}

function updateStoreKey(key, value) {
    store.setItem(key, JSON.stringify(value));
}

export class StorageLocal {
    constructor(app) {
        this.app = app;
        this.name = 'LocalStorage';
        //initialize store
        this.initializeStore();
    }

    initializeStore() {
    }

    getTemplateCategories() {
        return Promise.resolve('123'.split('').map(id => ({value: id, text: 'Category ' + id})));
    }

    getTemplates(filter) {
        return Promise.resolve([emptyTemplate, ...templates.filter(item => {
            var matchCat = null;
            if (filter.categories && filter.categories.length) {
                matchCat = filter.categories.indexOf(item.categoryId) >= 0;
            }

            var matchKeyword = null;
            if (filter.keyword && filter.keyword != '') {
                var re = new RegExp(filter.keyword, 'i');
                matchKeyword = re.test(item.description) || re.test(item.name)  || re.test(item.category);
            }

            return (matchKeyword == null || matchKeyword) && (matchCat == null || matchCat);
        })]);
    }

    getObject(id) {
        if (!id) return;
        let objects = getCollection('objects');
        let index = objects.findIndex(o => o.id == id);
        if (index >= 0) {
            return Promise.resolve(objects[index]);
        }
        return Promise.resolve(false);
    }

    getObjects(filter) {
        return Promise.resolve(getCollection('objects', []));
    }

    getSpecList() {
        const specs = [
            { id: 'rea', name: 'Recurso educativo abierto' },
            { id: 'obi', name: 'Objeto informativo' },
            { id: 'red', name: 'Recurso digital' }
        ];

        return Promise.resolve(specs);
    }

    getSpec(id) {
        return Promise.resolve(specs[id]);
    }

    createObject(properties) {
        const manifest = Object.assign({}, properties);
        const template = manifest.templateId == 0 ? emptyTemplate
            : templates.find(t => t.id == manifest.templateId);
        manifest.baseUrl = template.baseUrl;
        delete manifest.templateId;
        return this.save(manifest);
    }

    save(dco) {
        let objects = getCollection('objects', []);
        if (!dco.id) {
            dco.id = 'dco_' + (new Date().getTime());
        }

        let index = objects.findIndex(o => o.id == dco.id);
        if (index >= 0) {
            objects[index] = dco;
        }
        else {
            objects.push(dco);
        }
        updateStoreKey('objects', objects);
        return Promise.resolve(dco);
    }

    delete(dco) {
        if (!dco.id) return;
        let objects = getCollection('objects');
        let index = objects.findIndex(o => o.id == dco.id);
        console.log(index);
        console.log(dco);
        if (index >= 0) {
            objects.splice(index, 1);
            updateStoreKey('objects', objects);
            return Promise.resolve(dco);
        }
        return Promise.resolve(false);
    }

    download(dco) {
        return Promise.resolve('plugins/storage.local/plantilla.zip'); // https://workupload.com/start/c2kh9NB'
    }

    share(dco) {
    }

    /*
    Object resources methods
    */
    /*
    List all resouces (files and folder) at an specified path of the object e.g (/, /content)
    returns: Array with the list of objects in the given path.
    */
    getResources(dco, path) {
        const resources = getCollection('res_'+dco.id, []);
        return Promise.resolve(resources.filter(r => r.path.substr(0, r.path.lastIndexOf('/')+1) == path));
    }
    /*
    Will rename a file in the object directory structure
    returns: { succeed: true | false, message: string };
    */
    renameResource(dco, res, newName) {
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const newPath = res.path.substr(0, res.path.lastIndexOf('/')+1) + newName;
        if (resources.find(r => r.path == newPath)) return Promise.reject('An item with the same path already exists');
        const item = resources.find(r => r.path == res.path);
        if (!item) Promise.reject('Resource not found');
        item.name = newName;
        const oldPath = item.path + '/';
        item.path = newPath;
        resources.filter(r => r.path.startsWith(oldPath)).map(r => r.path = r.path.replace(oldPath, newPath+'/'));
        updateStoreKey(key, resources);
        return Promise.resolve(item);
    }
    /*
    Will delete a file in the object directory structure
    returns: { succeed: true | false, message: string };
    */
    deleteResource(dco, path) {
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const basePath = path + '/';
        collections[key] = resources.filter(r => !(r.path == path || r.path.startsWith(basePath)));
        updateStoreKey(key, collections[key]);
        return Promise.resolve(true);
    }
    /*
    Will add a new resource in the directory structure at the given path
    resouce: { type: F|D, name: string, file: Blob | null }
    returns: { succeed: true | false, message: string };
    */
    addResource(dco, res, basepath){
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const { type, name, size, createdAt, extension } = res;
        if (!/\/$/.test(basepath)) basepath += '/';
        const path = [basepath, name].join('');
        let item = resources.find(r => r.path == path);
        if (item) {
            return Promise.reject('An item with the same path already exists');
        }
        item = {type, path, name, size, createdAt, extension, parent: basepath };
        resources.push(item);
        updateStoreKey(key, resources);
        return Promise.resolve(item);
    }

    /*
    Will get the Index page content for a given dco
    dco: { id: string }
    returns: Promise<base64string>;
    */
    getIndex(dco) {
        const key = 'index_'+dco.id;
        //const value = readStoreKey(key, "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5JbmljaW88L3RpdGxlPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm8iPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWcvaWNvbi5zdmciPgogICAgPGxpbmsgaHJlZj0iY29tcG9uZW50cy9qcXVlcnkvY3NzL2N1c3RvbS9qcXVlcnktdWkubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8bGluayBocmVmPSJjb21wb25lbnRzL2lvbmljb25zL2Nzcy9pb25pY29ucy5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KICAgIDxsaW5rIGhyZWY9ImNzcy9zY29ybXBsYXllci5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgoKICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnktdWkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9hcHAuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2xhbmcuZXMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvc2Nvcm0vcGxheWVyLmpzIj4gPC9zY3JpcHQ+Cgo8L2hlYWQ+Cjxib2R5IGRhdGEtYXV0b2xvYWQ9ImZhbHNlIiBkYXRhLWRpc3BsYXktd2luZG93PSJtb2RhbCIgZGF0YS13aW5kb3ctd2lkdGg9IjEwMCIgZGF0YS13aW5kb3ctaGVpZ2h0PSIxMDAiPgogICAgPGRpdiBpZD0iYm9keSI+CiAgICAgICAgPGhlYWRlcj4KICAgICAgICAgICAgPGgxPk5vbWJyZSBkZWwgPGJyIC8+PHNwYW4+Y29tcG9uZW50ZTwvc3Bhbj4gPHNwYW4gY2xhc3M9ImxldmVsIj5OaXZlbDwvc3Bhbj48L2gxPgogICAgICAgICAgICA8aDI+VMOtdHVsbyBkZSBsYSBhY3RpdmlkYWQ8L2gyPgogICAgICAgICAgICA8aW1nIHNyYz0iaW1nL3BvcnRhZGEucG5nIiB0aXRsZT0iSW5pY2lvIiAvPgogICAgICAgIDwvaGVhZGVyPgoKICAgICAgICA8bWFpbiBpZD0iY29udGVudCI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPk9iamV0aXZvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIGV4cGxvcmFyIGVsIGVzdGlsbyBkZSBhcHJlbmRpemFqZSBwcmVkb21pbmFudGUgZGUgbG9zIHBhcnRpY2lwYW50ZXMsIGNvbiBlbCBmaW4gZGUgYXBvcnRhciBoZXJyYW1pZW50YXMgYWwgcGVuc2FtaWVudG8gY3LDrXRpY28sIHJlZmxleGl2bywgYXJndW1lbnRhdGl2byB5IGNyZWF0aXZvIHBhcmEgZ3VpYXIgbGEgZW5zZcOxYW56YS1hcHJlbmRpemFqZSBlbiBsYXMgw6FyZWFzIGRlIGxhIHNhbHVkLgogICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+TW9kYWxpZGFkOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWwKICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICBFc3RhIGFjdGl2aWRhZCBlc3TDoSBvcmdhbml6YWRhIGVuIHRyZXMgcGFydGVzOgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPG9sPgogICAgICAgICAgICAgICAgICAgIDxsaT5VbmEgYnJldmUgaW50cm9kdWNjacOzbiByZXNwZWN0byBhIGxvcyBFc3RpbG9zIGRlIGFwcmVuZGl6YWplLjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPlVuYSBwcnVlYmEgZGVsIEN1ZXN0aW9uYXJpbyBDQU1FQSBwYXJhIHJlY29ub2NlciBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBkZSBzdSBlc3RpbG8gZGUgYXByZW5kaXphamUgaW1wZXJhbnRlIGVuIERlc2N1YnJhIHN1IGVzdGlsbyBkZSBhcHJlbmRpemFqZS48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5VbmEgYWN0aXZpZGFkIGRlIHJlcGFzbyBzb2JyZSBsb3MgZXN0aWxvcyBkZSBhcHJlbmRpemFqZS48L2xpPgogICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImR1cmF0aW9uIj4KICAgICAgICAgICAgICAgIER1cmFjacOzbjoKICAgICAgICAgICAgICAgIDxzcGFuPjQ8L3NwYW4+CiAgICAgICAgICAgICAgICBob3JhcwogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L21haW4+CiAgICAgICAgPGRpdiBpZD0icGxheV9zY29ybSI+PC9kaXY+CiAgICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+Cg==");
        const value = readStoreKey(key, "PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCiAgICA8dGl0bGU+SW5pY2lvPC90aXRsZT4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyI+DQogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWcvaWNvbi5zdmciPg0KICAgIDxsaW5rIGhyZWY9ImNvbXBvbmVudHMvanF1ZXJ5L2Nzcy9jdXN0b20vanF1ZXJ5LXVpLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIDxsaW5rIGhyZWY9ImNzcy9zY29ybXBsYXllci5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KDQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvanF1ZXJ5L2pxdWVyeS5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnktdWkubWluLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ianMvbGFuZy5lcy5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvc2Nvcm0vcGxheWVyLmpzIj4gPC9zY3JpcHQ+DQoNCjwvaGVhZD4NCjxib2R5IGRhdGEtYXV0b2xvYWQ9ImZhbHNlIiBkYXRhLWRpc3BsYXktd2luZG93PSJtb2RhbCIgZGF0YS13aW5kb3ctd2lkdGg9IjEwMCIgZGF0YS13aW5kb3ctaGVpZ2h0PSIxMDAiPg0KICAgIDxkaXYgaWQ9ImJvZHkiPg0KICAgICAgICA8ZGl2IGlkPSJjb250ZW50Ij4NCg0KICAgICAgICAgICAgPGgxPlByZXNlbnRhY2nDs248L2gxPg0KICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgRXN0YSBww6FnaW5hIGVzIGxhIHF1ZSBzZSBjYXJnYSBpbmljaWFsbWVudGUsIHB1ZWRlIHV0aWxpemFyc2UgcGFyYSBkYXIgaW5zdHJ1Y2Npb25lcyBhIGxvcyB1c3VhcmlvcywgcGFyYSBoYWNlciBsYSBwcmVzZW50YWNpw7NuIGRlbCBjb250ZW5pZG8gbyBwdWVkZSBvYnZpYXJzZSBjb25maWd1csOhbmRvbGEgcGFyYSBjYXJnYXIgZWwgY29udGVuaWRvIGF1dG9tw6F0aWNhbWVudGUuIEVuIGVsIGNhc28gZGUgcHJlc2VudGFyIGVsIGRvY3VtZW50bywgc2UgcmVjb21pZW5kYSBtb3N0cmFyIGVuIGVzdGEgcMOhZ2luYTogdW5hIDxzdHJvbmc+aW50cm9kdWNjacOzbjwvc3Ryb25nPiBhbCBjb250ZW5pZG8gcXVlIHNlIGVuY29udHJhcsOhIGVuIGVsIGRvY3VtZW50bywgZWwgPHN0cm9uZz5vYmpldGl2bzwvc3Ryb25nPiBxdWUgc2UgZXNwZXJhIGxvZ3JhciBhYm9yZGFuZG8gZWwgY29udGVuaWRvLCBlbCB0aWVtcG8gYXByb3hpbWFkbyAoPHN0cm9uZz5kdXJhY2nDs248L3N0cm9uZz4pIHF1ZSB1bmEgcGVyc29uYSBkZWJlcsOtYSBkZWRpY2FyIGEgY29tcGxldGFyIGVsIGRvY3VtZW50by4NCiAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgPGgyPkNvbmZpZ3VyYWNpw7NuPC9oMj4NCiAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgIEVzdGEgcMOhZ2luYSB0aWVuZSBsb3Mgc2lndWllbnRlcyBwYXLDoW1ldHJvcyBkZSBjb25maWd1cmFjacOzbjoNCiAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS1hdXRvbG9hZD0iW3RydWUgfCA8ZW0+ZmFsc2U8L2VtPl0iPC9zdHJvbmc+OiBQYXJhIGluZGljYXIgc2kgc2UgY2FyZ2EgZWwgY29udGVuaWRvIGF1dG9tw6F0aWNhbWVudGUgc2FsdMOhbmRvc2UgZXN0YSBww6FnaW5hIG8gc2kgc2UgZGVzcGxpZWdhIGxhIHDDoWdpbmEgeSBlbCBjb250ZW5pZG8gc2UgYWJyZSBkZXNkZSBlbCBib3TDs24gZGUgaW5pY2lvLiBQcm9waWVkYWQgZGVmaW5pZGEgZW4gZWwgZWxlbWVudG8gPGVtPmJvZHk8L2VtPi4gRWplbXBsbzo8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgPHByZT4gICAgJmx0O2JvZHkgZGF0YS1hdXRvbG9hZD0idHJ1ZSImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS1kaXNwbGF5LXdpbmRvdz0iWzxlbT50b3A8L2VtPiB8IHBvcHVwIHwgbW9kYWxdIjwvc3Ryb25nPjogRGVmaW5lIGxhIG1hbmVyYSBjb21vIHNlIGNhcmdhcsOhIGVsIGNvbnRlbmlkbywgc2kgZW4gbGEgbWlzbWEgcMOhZ2luYSwgY29tbyB2ZW50YW5hIG1vZGFsIChtb2RhbCkgbyBjb21vIHZlbnRhbmEgZW1lcmdlbnRlIChwb3B1cCkuIFByb3BpZWRhZCBkZWZpbmlkYSBlbiBlbCBlbGVtZW50byA8ZW0+Ym9keTwvZW0+LiBFamVtcGxvOjxiciAvPg0KICAgICAgICAgICAgICAgICAgICA8cHJlPiAgICZsdDtib2R5IGRhdGEtZGlzcGxheS13aW5kb3c9InRvcCImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS13aW5kb3ctd2lkdGg9Ils8ZW0+bnVtYmVyPC9lbT5dIjwvc3Ryb25nPjogSW5kaWNhIGVsIGFuY2hvIGRlIGxhIHZlbnRhbmEgZW1lcmdlbnRlLCBlbiBwaXhlbGVzLiBFc3RhIHByb3BpZWRhZCBlc3TDoSBkaXNwb25pYmxlIGVuIGVsIGNhc28gZGUgcXVlIDxlbT5kYXRhLWRpc3BsYXktd2luZG93PC9lbT4gc2UgZXN0YWJsZXpjYSBhIDxlbT5wb3B1cDwvZW0+LiBTaSBzZSBlc3RhYmxlY2UgZW4gMTAwIHkgPGVtPmRhdGEtd2luZG93LWhlaWdodDwvZW0+IHRhbWJpw6luIHNlIGVzdGFibGVjZSBlbiAxMDAsIHNlIHRvbWFyw6EgY29tbyBlbCAxMDAlIGRlIGxhIHBhbnRhbGxhIGxvIHF1ZSBlcXVpdmFsZSBhcHJveGltYWRhbWVudGUgYSAicGFudGFsbGEgY29tcGxldGEiLiBQcm9waWVkYWQgZGVmaW5pZGEgZW4gZWwgZWxlbWVudG8gPGVtPmJvZHk8L2VtPi4gRWplbXBsbzo8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgPHByZT4gICAmbHQ7Ym9keSBkYXRhLWRpc3BsYXktd2luZG93PSJwb3B1cCIgZGF0YS13aW5kb3ctd2lkdGg9IjgwMCImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS13aW5kb3ctaGVpZ2h0PSJbPGVtPm51bWJlcjwvZW0+XSI8L3N0cm9uZz46IEluZGljYSBlbCBhbHRvIGRlIGxhIHZlbnRhbmEgZW1lcmdlbnRlLCBlbiBwaXhlbGVzLiBFc3RhIHByb3BpZWRhZCBlc3TDoSBkaXNwb25pYmxlIGVuIGVsIGNhc28gZGUgcXVlIDxlbT5kYXRhLWRpc3BsYXktd2luZG93PC9lbT4gc2UgZXN0YWJsZXpjYSBhIDxlbT5wb3B1cDwvZW0+LiBTaSBzZSBlc3RhYmxlY2UgZW4gMTAwIHkgPGVtPmRhdGEtd2luZG93LXdpZHRoPC9lbT4gdGFtYmnDqW4gc2UgZXN0YWJsZWNlIGVuIDEwMCwgc2UgdG9tYXLDoSBjb21vIGVsIDEwMCUgZGUgbGEgcGFudGFsbGEgbG8gcXVlIGVxdWl2YWxlIGFwcm94aW1hZGFtZW50ZSBhICJwYW50YWxsYSBjb21wbGV0YSIuIFByb3BpZWRhZCBkZWZpbmlkYSBlbiBlbCBlbGVtZW50byA8ZW0+Ym9keTwvZW0+LiBFamVtcGxvOjxiciAvPg0KICAgICAgICAgICAgICAgICAgICA8cHJlPiAgICZsdDtib2R5IGRhdGEtZGlzcGxheS13aW5kb3c9InBvcHVwIiBkYXRhLXdpbmRvdy1oZWlnaHQ9IjYwMCImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8aDI+UGVyc29uYWxpemFjacOzbjwvaDI+DQogICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICBFc3RhIHDDoWdpbmEgaW5pY2lhbCBzZSBwdWVkZSBwZXJzb25hbGl6YXIgcHJpbmNpcGFsbWVudGUgbWVkaWFudGUgZG9zIGFyY2hpdm9zOg0KICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgPG9sPg0KICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5pbmRleC5odG1sPC9zdHJvbmc+OiBFcyBlbCBhcmNoaXZvIGRvbmRlIHNlIGluZ3Jlc2EgZWwgY29udGVuaWRvIHZpc2libGUgZW4gbGEgcMOhZ2luYSwgZW4gSFRNTC4gRGVudHJvIGRlbCBjb250ZW5pZG8gc2UgZGViZSByZXNwZXRhciBlbCA8ZW0+ZGl2PC9lbT4gbWFyY2FkbyBjb24gZWwgaWQgPHN0cm9uZz5wbGF5X3Njb3JtPC9zdHJvbmc+IGF1bnF1ZSBzdSB1YmljYWNpw7NuIHB1ZWRlIHNlciBhIGRpc2NyZWNpw7NuLiBFbiBlc2UgPGVtPmRpdjwvZW0+IGVzIGRvbmRlIHNlIGluY2x1eWUgZWwgYm90w7NuIHBhcmEgY2FyZ2FyIGVsIGRvY3VtZW50byB5IGRvbmRlIHNlIG11ZXN0cmFuIGFsZ3Vub3MgbWVuc2FqZXMgY29tbyBlbCBxdWUgaW5kaWNhIHNpIGxhIHDDoWdpbmEgaGEgc2lkbyBibG9xdWVhZGEgcG9yIGVsIGJsb3F1ZWFkb3IgZGUgcG9wdXBzLCBlbiBjYXNvIGRlIGFwbGljYXIuDQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Y3NzL3Njb3JtcGxheWVyLmNzczwvc3Ryb25nPjogQ29udGllbmUgbG9zIGVzdGlsb3MgQ1NTIHF1ZSBzZSBhcGxpY2FuIGEgZXN0YSBww6FnaW5hLCBsb3MgY3VhbGVzIGRlZmluZW4gc3UgYXBhcmllbmNpYS4gQ29tbyBlc3RpbG9zIGVzcGVjaWFsZXMgc2UgZGViZSBjb25zaWRlcmFyOiA8ZW0+LnVpLXN0YXRlLWVycm9yPC9lbT4geSA8ZW0+LnVpLXN0YXRlLWhpZ2hsaWdodDwvZW0+IGxvcyBjdWFsZXMgc29uIHV0aWxpemFkb3MgcGFyYSBtYXJjYXIgbG9zIG1lbnNhamVzIGF1dG9tw6F0aWNvcywgZGUgZXJyb3IgbyBub3RpZmljYWNpw7NuIHJlc3BlY3RpdmFtZW50ZSwgZW4gY2FzbyBkZSBxdWUgYXBsaXF1ZS4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgIDxzdHJvbmc+Tm90YTo8L3N0cm9uZz4gQ3VhbHF1aWVyIGltYWdlbiB1dGlsaXphZGEgY29tbyBjb250ZW5pZG8gZW4gw6lzdGEgbyBlbiBvdHJhIHDDoWdpbmEgZGViZSBpciBlbiBlbCBkaXJlY3RvcmlvIDxlbT5jb250ZW50LzwvZW0+Lg0KICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgPGRpdiBpZD0icGxheV9zY29ybSI+PC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg==");
        return Promise.resolve(value);
    }

    /*
    Will add a new resource in the directory structure at the given path
    resouce: { type: F|D, name: string, file: Blob | null }
    returns: { succeed: true | false, message: string };
    */
    getContent(dco) {
        const key = 'content_'+dco.id;
        //const value = readStoreKey(key, "");
        const value = readStoreKey(key, "");
        return Promise.resolve(value);
    }

    updateIndex(dco, index) {
        const key = 'index_'+dco.id;
        updateStoreKey(key, index);
    }

    updateContent(dco, content) {
        const key = 'content_'+dco.id;
        updateStoreKey(key, content);
    }

    grantAccess(dco, user) {
        let objects = getCollection('objects', []);
        let index = objects.findIndex(o => o.id == dco.id);
        if (index < 0) {
            return Promise.reject('dco.objectNotFound');
        }
        objects[index].shareWith.push(user);
        updateStoreKey('objects', objects);
        return Promise.resolve(true);
    }

    revokeAccess(dco, user) {
        let objects = getCollection('objects', []);
        let index = objects.findIndex(o => o.id == dco.id);
        if (index < 0) {
            return Promise.reject('dco.objectNotFound');
        }
        let index2 = objects[index].shareWith.findIndex(it => it.email == user.email);
        objects[index].shareWith.splice(index2, 1);
        updateStoreKey('objects', objects);
        return Promise.resolve(true);
    }

    updateAccess(dco, user) {
        let objects = getCollection('objects', []);
        let index = objects.findIndex(o => o.id == dco.id);
        if (index < 0) {
            return Promise.reject('dco.objectNotFound');
        }
        let index2 = objects[index].shareWith.findIndex(it => it.email == user.email);
        objects[index].shareWith[index2] = user;
        updateStoreKey('objects', objects);
        return Promise.resolve(true);
    }
}
